// "sqlite"
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Discussion {
  id            Int           @id @default(autoincrement())
  hash          String        @unique
  ownerId       Int // Add this field to reference the owner
  owner         User          @relation(fields: [ownerId], references: [id])
  sourceUrl     String        @unique
  description   String
  nftId         String?
  prompt        String
  listingStatus ListingStatus @default(Unlisted)
  topic         String
  rewards       Reward[]
  chat          Chat?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("discussions")
}

model Survey {
  id            Int           @id @default(autoincrement())
  hash          String        @unique
  ownerId       Int // Add this field to reference the owner
  owner         User          @relation(fields: [ownerId], references: [id])
  sourceUrl     String        @unique
  description   String
  nftId         String?
  prompt        String
  listingStatus ListingStatus @default(Unlisted)
  topic         String
  rewards       Reward[]
  chat          Chat?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("surveys")
}

model Voting {
  id            Int           @id @default(autoincrement())
  hash          String        @unique
  ownerId       Int // Add this field to reference the owner
  owner         User          @relation(fields: [ownerId], references: [id])
  sourceUrl     String        @unique
  description   String
  nftId         String?
  prompt        String
  listingStatus ListingStatus @default(Unlisted)
  topic         String
  rewards       Reward[]
  chat          Chat?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("voting_list")
}

model DataSet {
  id            Int           @id @default(autoincrement())
  hash          String        @unique
  ownerId       Int // Add this field to reference the owner
  owner         User          @relation(fields: [ownerId], references: [id])
  sourceUrl     String        @unique
  description   String
  nftId         String?
  prompt        String
  listingStatus ListingStatus @default(Unlisted)
  topic         String
  rewards       Reward[]
  chat          Chat?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("datasets")
}

model Reward {
  id           Int              @id @default(autoincrement())
  description  String
  condition    String
  sum          Int
  token        Token?
  startDate    DateTime?
  status       RewardStatusEnum @default(Pending)
  surveyId     Int?
  survey       Survey?          @relation(fields: [surveyId], references: [id])
  votingId     Int?
  voting       Voting?          @relation(fields: [votingId], references: [id])
  datasetId    Int?
  dataset      DataSet?         @relation(fields: [datasetId], references: [id])
  discussionId Int?
  discussion   Discussion?      @relation(fields: [discussionId], references: [id])
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")

  @@map("rewards")
}

model Token {
  id        Int      @id @default(autoincrement())
  address   String
  name      String
  symbol    String
  chain     String
  chainId   String
  rewardId  Int      @unique
  reward    Reward   @relation(fields: [rewardId], references: [id])
  walletId  Int      @unique
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  tokens    Token[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Chat {
  id           Int         @id @default(autoincrement())
  messages     Message[]
  discussionId Int?        @unique
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  votingId     Int?        @unique
  voting       Voting?     @relation(fields: [votingId], references: [id])
  datasetId    Int?        @unique
  dataset      DataSet?    @relation(fields: [datasetId], references: [id])
  surveyId     Int?        @unique
  survey       Survey?     @relation(fields: [surveyId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("chats")
}

model Message {
  id        Int       @id @default(autoincrement())
  message   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  chatId    Int
  chat      Chat      @relation(fields: [chatId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("messages")
}

model User {
  id               Int           @id @default(autoincrement())
  address          String        @unique
  email            String
  discussions      Discussion[]
  surveys          Survey[]
  votings          Voting[]
  datasets         DataSet[]
  messages         Message[]
  wallet           Wallet?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  mails            Mail[]
  marketplaceOwner Marketplace[] @relation("MarketplaceOwner")
  bidOwner         Bid[]         @relation("BidOwner")

  @@map("users")
}

model Mail {
  id        Int      @id @default(autoincrement())
  sender    String
  receiver  String
  topic     String
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("mails")
}

enum RewardStatusEnum {
  Pending
  Started
  Executing
  Finish
}

enum LotType {
  DataSet
  Voting
  Survey
  Discussion
}

enum BidStatus {
  Pending
  Accepted
  Rejected
}

enum ListingStatus {
  Unlisted
  Listed
  Withdrawn
}

enum StatusLot {
  Active
  Inactive
  Sold
  Cancelled
}

model Marketplace {
  id           Int       @id @default(autoincrement())
  ownerLot     Int
  owner        User      @relation(fields: [ownerLot], references: [id], name: "MarketplaceOwner")
  typeLot      LotType
  hashResource String
  nftId        String?
  hashLot      String?
  price        BigInt
  bids         Bid[]
  history      History[]
  status       StatusLot @default(Active)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("marketplace")
}

model Bid {
  id        Int         @id @default(autoincrement())
  bidOwner  Int
  owner     User        @relation(fields: [bidOwner], references: [id], name: "BidOwner")
  price     BigInt
  status    BidStatus
  idLot     Int
  lot       Marketplace @relation(fields: [idLot], references: [id])
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("bids")
}

model History {
  id        Int         @id @default(autoincrement())
  idLot     Int
  lot       Marketplace @relation(fields: [idLot], references: [id])
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("history")
}
