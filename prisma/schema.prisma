// "sqlite"
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Discussion {
  id          Int      @id @default(autoincrement())
  hash        String   @unique
  creator     User?
  sourceUrl   String   @unique
  description String
  prompt      String
  topic       String
  rewards     Reward[]
  chat        Chat?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("discussions")
}

model Survey {
  id          Int      @id @default(autoincrement())
  hash        String   @unique
  creator     User?
  sourceUrl   String   @unique
  description String
  prompt      String
  topic       String
  rewards     Reward[]
  chat        Chat?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("surveys")
}

model Reward {
  id           Int         @id @default(autoincrement())
  description  String
  condition    String
  sum          Int
  token        Token?
  surveyId     Int?        @unique
  survey       Survey?     @relation(fields: [surveyId], references: [id])
  discussionId Int?        @unique
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("rewards")
}

model Token {
  id        Int      @id @default(autoincrement())
  address   String
  name      String
  symbol    String
  chain     String
  chainId   String
  rewardId  Int      @unique
  reward    Reward   @relation(fields: [rewardId], references: [id])
  walletId  Int      @unique
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  tokens    Token[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Chat {
  id           Int         @id @default(autoincrement())
  messages     Message[]
  discussionId Int?        @unique
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  surveyId     Int?        @unique
  survey       Survey?     @relation(fields: [surveyId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("chats")
}

model Message {
  id        Int       @id @default(autoincrement())
  message   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  chatId    Int
  chat      Chat      @relation(fields: [chatId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("messages")
}

model User {
  id              Int         @id @default(autoincrement())
  address         String      @unique
  email           String
  creator         Discussion? @relation(fields: [creatorId], references: [id])
  creatorId       Int?        @unique
  creatorSurveyId Int?        @unique
  creatorSurvey   Survey?     @relation(fields: [creatorSurveyId], references: [id])
  messages        Message[]
  wallet          Wallet?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  mails           Mail[]

  @@map("users")
}

model Mail {
  id        Int      @id @default(autoincrement())
  sender    String
  receiver  String
  topic     String
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("mails")
}
